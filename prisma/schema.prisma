// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserType {
  CANDIDATE
  EMPLOYER
  ADMIN
}

enum GenderType {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum JobTypeEnum {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERNSHIP
  FREELANCE
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  NATIVE
}

enum JobStatus {
  PENDING
  APPROVED
  REJECTED
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  INTERVIEWING
  OFFER_MADE
  REJECTED
  WITHDRAWN
}

enum FileTypeEnum {
  PDF
  DOC
  DOCX
  OTHER
}


model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String?
  fullName     String
  userType     UserType
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  avatar       String?
  employer     Employer?
  candidate    Candidate?
  googleId     String?  @unique 
}

model Employer {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  companyName    String
  companyLogoUrl String?
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs           Job[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Candidate {
  id              Int        @id @default(autoincrement())
  userId          Int        @unique
  fullName        String?
  dateOfBirth     DateTime?
  gender          GenderType?
  address         String?
  phoneNumber     String?    @unique
  profilePhotoUrl String?
  motivation      String?
  skills          String?
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  education       Education[]
  workExperience  WorkExperience[]
  applications    Application[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  CV CV[]
}

model Education {
  id             Int       @id @default(autoincrement())
  candidateId    Int
  startDate      DateTime
  endDate        DateTime?
  schoolName     String
  degree         String?
  fieldOfStudy   String?
  candidate      Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  candidateId Int
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean   @default(false)
  companyName String
  position    String?
  description String?
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Job {
  id             Int       @id @default(autoincrement())
  employerId     Int
  title          String
  description    String
  requirements   String?
  salaryRange    String?
  location       String?
  jobType        JobTypeEnum
  status         JobStatus @default(PENDING)
  postedDate     DateTime  @default(now())
  employer       Employer  @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications   Application[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CV {
  id          Int       @id @default(autoincrement())
  candidateId Int
  fileName    String
  fileUrl     String
  fileType    FileTypeEnum?
  isPrimary   Boolean   @default(false)
  uploadedAt  DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id              Int               @id @default(autoincrement())
  candidateId     Int
  jobId           Int
  cvId            Int
  applicationDate DateTime          @default(now())
  status          ApplicationStatus @default(SUBMITTED)
  candidate       Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job             Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  cv              CV        @relation(fields: [cvId], references: [id], onDelete: Restrict)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([candidateId, jobId])
}